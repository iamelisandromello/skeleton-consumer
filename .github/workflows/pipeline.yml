name: Dynamic Lambda Deployment

on:
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PROJECT_NAME: my-lambda
  ENVIRONMENT: staging
  S3_BUCKET_NAME: my-shared-lambdas-bucket
  TERRAFORM_PATH: terraform/terraform 
  # Vari√°vel para controlar a cria√ß√£o de uma NOVA fila SQS
  # Defina como 'false' se n√£o quiser criar a fila SQS
  CREATE_SQS_QUEUE: false # Definido como false para testar o novo cen√°rio

  # NOVO: Vari√°vel para controlar se usaremos uma fila SQS EXISTENTE como trigger
  # Defina como 'true' para habilitar esta funcionalidade
  USE_EXISTING_SQS_TRIGGER: true # Definido como true para testar o novo cen√°rio

  # NOVO: ARN da fila SQS EXISTENTE se USE_EXISTING_SQS_TRIGGER for true
  # Substitua pelo ARN real da sua fila SQS existente, se USE_EXISTING_SQS_TRIGGER for true
  EXISTING_SQS_QUEUE_ARN: "arn:aws:sqs:us-east-1:125702582030:skeleton-consumer-queue" # EX: Substitua pelo ARN real

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # -------------------------------
      # üßæ CHECKOUT Application
      # -------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -------------------------------
      # ‚öôÔ∏è CHECKOUT Terraform Template
      # -------------------------------            
      - name: Checkout Terraform template
        uses: actions/checkout@v4
        with:
          repository: iamelisandromello/skeleton-terraform-template
          path: terraform
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------
      # ‚öôÔ∏è DEBUG: Verificar estrutura e conte√∫do do Terraform Template (mantido para valida√ß√£o)
      # -------------------------------
      - name: Debug - Verificar estrutura e conte√∫do do Terraform Template (P√ìS-CHECKOUT)
        run: |
          echo "üìÇ Listando arquivos e diret√≥rios recursivamente em 'terraform/'"
          ls -R terraform/ || echo "‚ùå Diret√≥rio 'terraform/' n√£o encontrado ou vazio."
          echo "---"

          echo "üìÑ Conte√∫do de terraform/main.tf (se existir, agora DEVE estar vazio):"
          cat terraform/main.tf 2>/dev/null || echo "‚ùå terraform/main.tf n√£o encontrado ou vazio."
          echo "---"

          echo "üìÑ Conte√∫do de terraform/terraform/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/main.tf 2>/dev/null || echo "‚ùå terraform/terraform/main.tf n√£o encontrado ou vazio. VERIFICAR!"
          echo "---"

          echo "üìÑ Conte√∫do de terraform/terraform/modules/sqs/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/modules/sqs/main.tf 2>/dev/null || echo "‚ùå terraform/terraform/modules/sqs/main.tf n√£o encontrado ou vazio. VERIFICAR!"
          echo "---"

      # -------------------------------
      # ‚öôÔ∏è SETUP NODE & VARS
      # -------------------------------        
      - name: Setup Node.js and Env Vars
        uses: iamelisandromello/skeleton-pipeline-template/setup-node@main
        with:
          node_version: '20'

      # -------------------------------
      # üîß BUILD & PACKAGE LAMBDA
      # -------------------------------          
      - name: Install & Build
        uses: iamelisandromello/skeleton-pipeline-template/build-package@main
        with:
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # üîÑ UPLOAD LAMBDA TO S3
      # -------------------------------        
      - name: Upload Lambda to S3
        uses: iamelisandromello/skeleton-pipeline-template/upload-to-s3@main
        with:
          global_env_vars_json: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # ‚öôÔ∏è TERRAFORM SETUP & TFVARS
      # -------------------------------          
      - name: Setup Terraform
        uses: iamelisandromello/skeleton-pipeline-template/setup-terraform@main
        with:
          terraform_version: '1.5.6'
          environment: ${{ env.ENVIRONMENT }}
          project_name: ${{ env.PROJECT_NAME }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # -------------------------------
      # üîÑ GENERATE TVARS
      # -------------------------------          
      - name: Generate tfvars
        uses: iamelisandromello/skeleton-pipeline-template/generate-tfvars@main
        with:
          ENVIRONMENTS: ${{ secrets.ENVIRONMENTS }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }} 
          # PASSANDO AS NOVAS VARI√ÅVEIS para generate-tfvars
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_arn: ${{ env.EXISTING_SQS_QUEUE_ARN }}

      # -------------------------------
      # üöö MOVER terraform.auto.tfvars.json para o diret√≥rio correto
      # -------------------------------
      - name: Mover terraform.auto.tfvars.json para o diret√≥rio correto
        run: |
          if [ -f "terraform.auto.tfvars.json" ]; then
            echo "üöö Movendo terraform.auto.tfvars.json da raiz do projeto consumer para ${{ env.TERRAFORM_PATH }}"
            mv terraform.auto.tfvars.json "${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          elif [ -f "terraform/terraform.auto.tfvars.json" ]; then
            echo "üöö Movendo terraform.auto.tfvars.json de terraform/ para ${{ env.TERRAFORM_PATH }}"
            mv terraform/terraform.auto.tfvars.json "${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          else
            echo "‚ùå terraform.auto.tfvars.json n√£o encontrado nem na raiz do projeto consumer nem em terraform/. Verifique a action 'generate-tfvars' e a estrutura de diret√≥rios."
            exit 1
          fi
        if: success() 

      # -------------------------------
      # DEBUG: Verificar terraform.auto.tfvars.json ap√≥s gera√ß√£o e movimento
      # -------------------------------
      - name: Debug - Verificar terraform.auto.tfvars.json (P√ìS-GERA√á√ÉO E MOVIMENTO)
        run: |
          echo "üìÇ Listando arquivos no diret√≥rio Terraform raiz (${{ env.TERRAFORM_PATH }}/):"
          ls -lah ${{ env.TERRAFORM_PATH }}/
          echo "---"
          echo "üìÑ Conte√∫do de ${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json (se existir):"
          cat ${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json 2>/dev/null || echo "‚ùå Arquivo terraform.auto.tfvars.json n√£o encontrado no diret√≥rio correto."
          echo "---"

      # -------------------------------
      # üîÑ IMPORT, VALIDATE & APPLY TERRAFORM
      # -------------------------------    
      - name: Importar recursos existentes
        uses: iamelisandromello/skeleton-pipeline-template/import-resources@main
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ env.AWS_REGION }}
          project_name: ${{ env.PROJECT_NAME }}
          environment: ${{ env.ENVIRONMENT }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }} 
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_arn: ${{ env.EXISTING_SQS_QUEUE_ARN }}
          # CORRE√á√ÉO CR√çTICA DO LINT/YAML: Envolver toda a express√£o em aspas duplas
          lambda_function_name: "${{ env.PROJECT_NAME }}${{ env.ENVIRONMENT == 'prod' ? '' : format('-%s', env.ENVIRONMENT) }}" 

      - name: Validar Terraform
        uses: iamelisandromello/skeleton-pipeline-template/validate-terraform@main
        with:
          terraform_path: ${{ env.TERRAFORM_PATH }} 

      - name: Terraform Plan and Apply
        uses: iamelisandromello/skeleton-pipeline-template/plan-apply-terraform@main
        with:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          ENVIRONMENTS_JSON: ${{ secrets.ENVIRONMENTS }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          # PASSANDO AS NOVAS VARI√ÅVEIS para plan-apply-terraform
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }}
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_arn: ${{ env.EXISTING_SQS_QUEUE_ARN }}
