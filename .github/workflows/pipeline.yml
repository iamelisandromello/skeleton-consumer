name: Dynamic Lambda Deployment

on:
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
  workflow_dispatch:

env:
  # Apenas segredos devem ser definidos aqui no n√≠vel global do workflow.
  # Vari√°veis como PROJECT_NAME, ENVIRONMENT, S3_BUCKET_NAME, AWS_REGION, TERRAFORM_PATH
  # e as vari√°veis SQS (CREATE_SQS_QUEUE, USE_EXISTING_SQS_TRIGGER, EXISTING_SQS_QUEUE_NAME)
  # ser√£o carregadas *dinamicamente* do pipeline.env pelo passo 'Load Configuration Variables'.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # -------------------------------
      # üßæ PASSO CR√çTICO: Checkout do C√≥digo da Aplica√ß√£o - DEVE SER O PRIMEIRO
      # -------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -------------------------------
      # ‚úÖ NOVO PASSO: Carregar vari√°veis de configura√ß√£o do arquivo externo
      # (AGORA MUITO MAIS ROBUSTO)
      # Este passo preenche as vari√°veis de ambiente do GitHub Actions com os valores de pipeline.env
      # -------------------------------
      - name: Load Configuration Variables
        run: |
          echo "Carregando vari√°veis de configura√ß√£o do pipeline.env..."
          if [ -f "${{ github.workspace }}/pipeline.env" ]; then
            # Loop atrav√©s do arquivo pipeline.env para exportar cada vari√°vel explicitamente.
            # Isso √© mais robusto do que 'grep >> $GITHUB_ENV' para garantir que todas as vari√°veis sejam lidas e exportadas.
            while IFS='=' read -r key value; do
              # Pula coment√°rios (#) e linhas vazias
              if [[ -z "$key" || "$key" =~ ^\s*# ]]; then
                continue
              fi # CORRE√á√ÉO: 'Fim' alterado para 'fi'
              # Remove espa√ßos em branco extras do in√≠cio/fim da chave e valor
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | xargs)

              # Adiciona a vari√°vel ao ambiente do GITHUB_ENV para que ela persista em passos futuros.
              echo "$key=$value" >> "$GITHUB_ENV"
              # Exporta tamb√©m para o ambiente do shell atual para o debug imediato.
              export "$key=$value" 
            done < "${{ github.workspace }}/pipeline.env"

            echo "Vari√°veis carregadas com sucesso de pipeline.env:"
            cat "${{ github.workspace }}/pipeline.env" # Apenas para visualiza√ß√£o no log
          else
            echo "‚ùå ERRO: O arquivo 'pipeline.env' n√£o foi encontrado na raiz do reposit√≥rio (${{ github.workspace }})."
            echo "Por favor, certifique-se de que 'pipeline.env' foi commitado e est√° na raiz do seu reposit√≥rio 'consumer'."
            exit 1
          fi # CORRE√á√ÉO: 'Fim' alterado para 'fi'
          echo "---"
          # DEBUG CR√çTICO: Mostra as vari√°veis de Ambiente do Job ap√≥s carregamento do pipeline.env
          echo "--- DEBUG: Vari√°veis de Ambiente do Job ap√≥s carregamento do pipeline.env ---"
          env | grep -E '^(CREATE_SQS_QUEUE|USE_EXISTING_SQS_TRIGGER|EXISTING_SQS_QUEUE_NAME|PROJECT_NAME|ENVIRONMENT|S3_BUCKET_NAME|AWS_REGION|TERRAFORM_PATH)'
          echo "------------------------------------------------------------------"


      # -------------------------------
      # ‚úÖ Valida√ß√£o das vari√°veis de SQS (mantido, agora usa vari√°veis carregadas)
      # -------------------------------
      - name: Validate SQS Configuration
        run: |
          echo "DEBUG: CREATE_SQS_QUEUE = '${{ env.CREATE_SQS_QUEUE }}'"
          echo "DEBUG: USE_EXISTING_SQS_TRIGGER = '${{ env.USE_EXISTING_SQS_TRIGGER }}'"
          if [[ "${{ env.CREATE_SQS_QUEUE }}" == "true" && "${{ env.USE_EXISTING_SQS_TRIGGER }}" == "true" ]]; then
            echo "::error::ERRO DE CONFIGURA√á√ÉO SQS: As vari√°veis 'CREATE_SQS_QUEUE' e 'USE_EXISTING_SQS_TRIGGER' n√£o podem ser 'true' ao mesmo tempo."
            echo "Por favor, defina apenas uma delas como 'true' para escolher entre criar uma nova fila SQS ou usar uma existente como trigger."
            exit 1
          fi # CORRE√á√ÉO: 'Fim' alterado para 'fi'
          echo "‚úÖ Configura√ß√£o de SQS validada com sucesso."

      # -------------------------------
      # ‚öôÔ∏è CHECKOUT Terraform Template
      # -------------------------------            
      - name: Checkout Terraform template
        uses: actions/checkout@v4
        with:
          repository: iamelisandromello/skeleton-terraform-template
          path: terraform
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------
      # ‚öôÔ∏è DEBUG: Verificar estrutura e conte√∫do do Terraform Template (mantido para valida√ß√£o)
      # -------------------------------
      - name: Debug - Verificar estrutura e conte√∫do do Terraform Template (P√ìS-CHECKOUT)
        run: |
          echo "üìÇ Listando arquivos e diret√≥rios recursivamente em 'terraform/'"
          ls -R terraform/ || echo "‚ùå Diret√≥rio 'terraform/' n√£o encontrado ou vazio."
          echo "---"
          echo "üìÑ Conte√∫do de terraform/terraform/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/main.tf 2>/dev/null || echo "‚ùå terraform/terraform/main.tf n√£o encontrado ou vazio. VERIFICAR!"
          echo "---"
          echo "üìÑ Conte√∫do de terraform/terraform/modules/sqs/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/modules/sqs/main.tf 2>/dev/null || echo "‚ùå terraform/terraform/modules/sqs/main.tf n√£o encontrado ou vazio. VERIFICAR!"
          echo "---"
          echo "üìÑ Conte√∫do de terraform/terraform/modules/lambda/variables.tf (verifica nova vari√°vel):"
          cat terraform/terraform/modules/lambda/variables.tf 2>/dev/null || echo "‚ùå terraform/terraform/modules/lambda/variables.tf n√£o encontrado ou vazio. VERIFICAR!"
          echo "---"


      # -------------------------------
      # ‚öôÔ∏è SETUP NODE & VARS
      # -------------------------------        
      - name: Setup Node.js and Env Vars
        uses: iamelisandromello/skeleton-pipeline-template/setup-node@main
        with:
          node_version: '20'

      # -------------------------------
      # üîß BUILD & PACKAGE LAMBDA
      # -------------------------------          
      - name: Install & Build
        uses: iamelisandromello/skeleton-pipeline-template/build-package@main
        with:
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # üîÑ UPLOAD LAMBDA TO S3
      # -------------------------------        
      - name: Upload Lambda to S3
        uses: iamelisandromello/skeleton-pipeline-template/upload-to-s3@main
        with:
          global_env_vars_json: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # ‚öôÔ∏è TERRAFORM SETUP & TFVARS
      # -------------------------------          
      - name: Setup Terraform
        uses: iamelisandromello/skeleton-pipeline-template/setup-terraform@main
        with:
          terraform_version: '1.5.6'
          environment: ${{ env.ENVIRONMENT }}
          project_name: ${{ env.PROJECT_NAME }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # -------------------------------
      # üîÑ GENERATE TVARS
      # -------------------------------          
      - name: Generate tfvars
        uses: iamelisandromello/skeleton-pipeline-template/generate-tfvars@main
        with:
          ENVIRONMENTS: ${{ secrets.ENVIRONMENTS }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          # Passando as vari√°veis de controle da SQS como inputs para a action generate-tfvars
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }} 
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }} # Passando do ambiente do job
          existing_sqs_queue_name: ${{ env.EXISTING_SQS_QUEUE_NAME }} # Passando do ambiente do job

      # -------------------------------
      # üöö MOVER terraform.auto.tfvars.json para o diret√≥rio correto
      # CORRE√á√ÉO: Usando github.workspace explicitamente para garantir o caminho absoluto
      # -------------------------------
      - name: Mover terraform.auto.tfvars.json para o diret√≥rio correto
        run: |
          if [ -f "terraform.auto.tfvars.json" ]; then
            echo "üöö Movendo terraform.auto.tfvars.json da raiz do projeto consumer para ${{ env.TERRAFORM_PATH }}"
            mv terraform.auto.tfvars.json "${{ github.workspace }}/${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          elif [ -f "terraform/terraform.auto.tfvars.json" ]; then
            echo "üöö Movendo terraform.auto.tfvars.json de terraform/ para ${{ env.TERRAFORM_PATH }}"
            mv terraform/terraform.auto.tfvars.json "${{ github.workspace }}/${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          else
            echo "‚ùå terraform.auto.tfvars.json n√£o encontrado nem na raiz do projeto consumer nem em terraform/. Verifique a action 'generate-tfvars' e a estrutura de diret√≥rios."
            exit 1
          fi # CORRE√á√ÉO: 'Fim' alterado para 'fi'
        if: success() 

      # -------------------------------
      # DEBUG: Verificar terraform.auto.tfvars.json ap√≥s gera√ß√£o e movimento
      # -------------------------------
      - name: Debug - Verificar terraform.auto.tfvars.json (P√ìS-GERA√á√ÉO E MOVIMENTO)
        run: |
          echo "üìÇ Listando arquivos no diret√≥rio Terraform raiz (${{ env.TERRAFORM_PATH }}/):"
          ls -lah ${{ github.workspace }}/${{ env.TERRAFORM_PATH }}/
          echo "---"
          echo "üìÑ Conte√∫do de ${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json (se existir):"
          cat ${{ github.workspace }}/${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json 2>/dev/null || echo "‚ùå Arquivo terraform.auto.tfvars.json n√£o encontrado no diret√≥rio correto."
          echo "---"

      # -------------------------------
      # NOVO PASSO: Calcular o nome da fun√ß√£o Lambda
      # -------------------------------
      - name: Calculate Lambda Function Name
        id: calculate_lambda_name
        shell: bash
        run: |
          LAMBDA_NAME="${{ env.PROJECT_NAME }}"
          if [ "${{ env.ENVIRONMENT }}" != "prod" ]; then
            LAMBDA_NAME="${LAMBDA_NAME}-${{ env.ENVIRONMENT }}"
          fi # CORRE√á√ÉO: 'Fim' alterado para 'fi'
          echo "Generated Lambda Name: $LAMBDA_NAME"
          echo "lambda_name=$LAMBDA_NAME" >> "$GITHUB_OUTPUT"

      # -------------------------------
      # üîÑ IMPORT, VALIDATE & APPLY TERRAFORM
      # -------------------------------    
      - name: Importar recursos existentes
        uses: iamelisandromello/skeleton-pipeline-template/import-resources@main
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ env.AWS_REGION }}
          project_name: ${{ env.PROJECT_NAME }}
          environment: ${{ env.ENVIRONMENT }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          # Passando as vari√°veis de controle da SQS para a action de import
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }} 
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }} # Passando do ambiente do job
          existing_sqs_queue_name: ${{ env.EXISTING_SQS_QUEUE_NAME }} # Passando do ambiente do job
          lambda_function_name: ${{ steps.calculate_lambda_name.outputs.lambda_name }}

      - name: Validar Terraform
        uses: iamelisandromello/skeleton-pipeline-template/validate-terraform@main
        with:
          terraform_path: ${{ env.TERRAFORM_PATH }} 

      - name: Terraform Plan and Apply
        uses: iamelisandromello/skeleton-pipeline-template/plan-apply-terraform@main
        with:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          ENVIRONMENTS_JSON: ${{ secrets.ENVIRONMENTS }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          # Passando as vari√°veis de controle da SQS para o plan-apply
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }}
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }} # Passando do ambiente do job
          existing_sqs_queue_name: ${{ env.EXISTING_SQS_QUEUE_NAME }} # Passando do ambiente do job
