name: Dynamic Lambda Deployment

on:
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
  workflow_dispatch:

env:
  # AWS_REGION: us-east-1 <-- REMOVIDO: Ser√° carregado do pipeline.env
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PROJECT_NAME: my-lambda
  ENVIRONMENT: staging
  S3_BUCKET_NAME: my-shared-lambdas-bucket
  TERRAFORM_PATH: terraform/terraform 
  # CREATE_SQS_QUEUE: false <-- REMOVIDO: Ser√° carregado do pipeline.env
  # USE_EXISTING_SQS_TRIGGER: true <-- REMOVIDO: Ser√° carregado do pipeline.env
  # EXISTING_SQS_QUEUE_ARN: "arn:aws:sqs:us-east-1:125702582030:skeleton-consumer-queue" <-- REMOVIDO: Ser√° carregado do pipeline.env

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # -------------------------------
      # üßæ CHECKOUT Application
      # -------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -------------------------------
      # ‚öôÔ∏è CHECKOUT Terraform Template
      # -------------------------------            
      - name: Checkout Terraform template
        uses: actions/checkout@v4
        with:
          repository: iamelisandromello/skeleton-terraform-template
          path: terraform
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------
      # NOVO PASSO: Debug para verificar o arquivo pipeline.env
      # -------------------------------
      - name: Debug - List Files in Workspace
        run: |
          echo "Listando conte√∫do do GITHUB_WORKSPACE (raiz do reposit√≥rio 'consumer'):"
          ls -lah "${{ github.workspace }}"
          echo "---"
          echo "Verificando se pipeline.env existe explicitamente:"
          if [ -f "${{ github.workspace }}/pipeline.env" ]; then
            echo "‚úÖ pipeline.env encontrado em ${{ github.workspace }}/"
            echo "Conte√∫do de pipeline.env:"
            cat "${{ github.workspace }}/pipeline.env"
          else
            echo "‚ùå pipeline.env N√ÉO encontrado em ${{ github.workspace }}/"
          fi
          echo "---"

      # -------------------------------
      # ‚úÖ PASSO ORIGINAL: Carregar vari√°veis de configura√ß√£o do arquivo externo
      # -------------------------------
      - name: Load Configuration Variables
        run: |
          echo "Carregando vari√°veis de configura√ß√£o do pipeline.env..."
          # Verifica se o arquivo pipeline.env existe (usando caminho absoluto para robustez)
          if [ -f "${{ github.workspace }}/pipeline.env" ]; then # Usando caminho absoluto
            # Seta as vari√°veis de ambiente a partir do arquivo
            # O comando '>> $GITHUB_ENV' √© o mecanismo do GitHub Actions para tornar vari√°veis dispon√≠veis para passos futuros
            cat "${{ github.workspace }}/pipeline.env" >> $GITHUB_ENV # Usando caminho absoluto
            echo "Vari√°veis carregadas com sucesso:"
            cat "${{ github.workspace }}/pipeline.env" # Usando caminho absoluto
          else
            echo "‚ùå ERRO: O arquivo 'pipeline.env' n√£o foi encontrado na raiz do reposit√≥rio (${{ github.workspace }})."
            echo "Por favor, certifique-se de que 'pipeline.env' foi commitado e est√° na raiz do seu reposit√≥rio 'consumer'."
            exit 1
          fi
          echo "---"

      # -------------------------------
      # ‚úÖ Valida√ß√£o das vari√°veis de SQS (mantido, agora usa vari√°veis carregadas)
      # -------------------------------
      - name: Validate SQS Configuration
        run: |
          if [[ "${{ env.CREATE_SQS_QUEUE }}" == "true" && "${{ env.USE_EXISTING_SQS_TRIGGER }}" == "true" ]]; then
            echo "::error::ERRO DE CONFIGURA√á√ÉO SQS: As vari√°veis 'CREATE_SQS_QUEUE' e 'USE_EXISTING_SQS_TRIGGER' n√£o podem ser 'true' ao mesmo tempo."
            echo "Por favor, defina apenas uma delas como 'true' para escolher entre criar uma nova fila SQS ou usar uma existente como trigger."
            exit 1
          fi
          echo "‚úÖ Configura√ß√£o de SQS validada com sucesso."

      # -------------------------------
      # ‚öôÔ∏è DEBUG: Verificar estrutura e conte√∫do do Terraform Template (mantido para valida√ß√£o)
      # -------------------------------
      - name: Debug - Verificar estrutura e conte√∫do do Terraform Template (P√ìS-CHECKOUT)
        run: |
          echo "üìÇ Listando arquivos e diret√≥rios recursivamente em 'terraform/'"
          ls -R terraform/ || echo "‚ùå Diret√≥rio 'terraform/' n√£o encontrado ou vazio."
          echo "---"

          echo "üìÑ Conte√∫do de terraform/main.tf (se existir, agora DEVE estar vazio):"
          cat terraform/main.tf 2>/dev/null || echo "‚ùå terraform/main.tf n√£o encontrado ou vazio."
          echo "---"

          echo "üìÑ Conte√∫do de terraform/terraform/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/main.tf 2>/dev/null || echo "‚ùå terraform/terraform/main.tf n√£o encontrado ou vazio. VERIFICAR!"
          echo "---"

          echo "üìÑ Conte√∫do de terraform/terraform/modules/sqs/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/modules/sqs/main.tf 2>/dev/null || echo "‚ùå terraform/terraform/modules/sqs/main.tf n√£o encontrado ou vazio. VERIFICAR!"
          echo "---"

      # -------------------------------
      # ‚öôÔ∏è SETUP NODE & VARS
      # -------------------------------        
      - name: Setup Node.js and Env Vars
        uses: iamelisandromello/skeleton-pipeline-template/setup-node@main
        with:
          node_version: '20'

      # -------------------------------
      # üîß BUILD & PACKAGE LAMBDA
      # -------------------------------          
      - name: Install & Build
        uses: iamelisandromello/skeleton-pipeline-template/build-package@main
        with:
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # üîÑ UPLOAD LAMBDA TO S3
      # -------------------------------        
      - name: Upload Lambda to S3
        uses: iamelisandromello/skeleton-pipeline-template/upload-to-s3@main
        with:
          global_env_vars_json: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # ‚öôÔ∏è TERRAFORM SETUP & TFVARS
      # -------------------------------          
      - name: Setup Terraform
        uses: iamelisandromello/skeleton-pipeline-template/setup-terraform@main
        with:
          terraform_version: '1.5.6'
          environment: ${{ env.ENVIRONMENT }}
          project_name: ${{ env.PROJECT_NAME }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # -------------------------------
      # üîÑ GENERATE TVARS
      # -------------------------------          
      - name: Generate tfvars
        uses: iamelisandromello/skeleton-pipeline-template/generate-tfvars@main
        with:
          ENVIRONMENTS: ${{ secrets.ENVIRONMENTS }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }} # AWS_REGION agora vem do env carregado
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }}
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_arn: ${{ env.EXISTING_SQS_QUEUE_ARN }}

      # -------------------------------
      # üöö MOVER terraform.auto.tfvars.json para o diret√≥rio correto
      # -------------------------------
      - name: Mover terraform.auto.tfvars.json para o diret√≥rio correto
        run: |
          if [ -f "terraform.auto.tfvars.json" ]; then
            echo "üöö Movendo terraform.auto.tfvars.json da raiz do projeto consumer para ${{ env.TERRAFORM_PATH }}"
            mv terraform.auto.tfvars.json "${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          elif [ -f "terraform/terraform.auto.tfvars.json" ]; then
            echo "üöö Movendo terraform/terraform.auto.tfvars.json de terraform/ para ${{ env.TERRAFORM_PATH }}"
            mv terraform/terraform.auto.tfvars.json "${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          else
            echo "‚ùå terraform.auto.tfvars.json n√£o encontrado nem na raiz do projeto consumer nem em terraform/. Verifique a action 'generate-tfvars' e a estrutura de diret√≥rios."
            exit 1
          fi
        if: success() 

      # -------------------------------
      # DEBUG: Verificar terraform.auto.tfvars.json ap√≥s gera√ß√£o e movimento
      # -------------------------------
      - name: Debug - Verificar terraform.auto.tfvars.json (P√ìS-GERA√á√ÉO E MOVIMENTO)
        run: |
          echo "üìÇ Listando arquivos no diret√≥rio Terraform raiz (${{ env.TERRAFORM_PATH }}/):"
          ls -lah ${{ env.TERRAFORM_PATH }}/
          echo "---"
          echo "üìÑ Conte√∫do de ${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json (se existir):"
          cat terraform/terraform.auto.tfvars.json 2>/dev/null || echo "‚ùå Arquivo terraform.auto.tfvars.json n√£o encontrado no diret√≥rio correto."
          echo "---"

      # -------------------------------
      # NOVO PASSO: Calcular o nome da fun√ß√£o Lambda
      # Este passo isola a l√≥gica de constru√ß√£o do nome da Lambda para evitar erros de parsing YAML.
      # -------------------------------
      - name: Calculate Lambda Function Name
        id: calculate_lambda_name # ID para referenciar os outputs deste passo
        shell: bash
        run: |
          LAMBDA_NAME="${{ env.PROJECT_NAME }}"
          if [ "${{ env.ENVIRONMENT }}" != "prod" ]; then
            LAMBDA_NAME="${LAMBDA_NAME}-${{ env.ENVIRONMENT }}"
          fi
          echo "Generated Lambda Name: $LAMBDA_NAME"
          echo "lambda_name=$LAMBDA_NAME" >> "$GITHUB_OUTPUT" # Armazena o nome da Lambda para uso em passos futuros

      # -------------------------------
      # üîÑ IMPORT, VALIDATE & APPLY TERRAFORM
      # -------------------------------    
      - name: Importar recursos existentes
        uses: iamelisandromello/skeleton-pipeline-template/import-resources@main
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ env.AWS_REGION }} # AWS_REGION agora vem do env carregado
          project_name: ${{ env.PROJECT_NAME }}
          environment: ${{ env.ENVIRONMENT }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }}
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_arn: ${{ env.EXISTING_SQS_QUEUE_ARN }}
          lambda_function_name: ${{ steps.calculate_lambda_name.outputs.lambda_name }}

      - name: Validar Terraform
        uses: iamelisandromello/skeleton-pipeline-template/validate-terraform@main
        with:
          terraform_path: ${{ env.TERRAFORM_PATH }} 

      - name: Terraform Plan and Apply
        uses: iamelisandromello/skeleton-pipeline-template/plan-apply-terraform@main
        with:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          ENVIRONMENTS_JSON: ${{ secrets.ENVIRONMENTS }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }} # CREATE_SQS_QUEUE agora vem do env carregado
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }} # USE_EXISTING_SQS_TRIGGER agora vem do env carregado
          existing_sqs_queue_arn: ${{ env.EXISTING_SQS_QUEUE_ARN }} # EXISTING_SQS_QUEUE_ARN agora vem do env carregado
