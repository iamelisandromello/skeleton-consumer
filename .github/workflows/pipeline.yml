name: Dynamic Lambda Deployment

on:
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
  workflow_dispatch:

env:
  # Estas variáveis serão carregadas do pipeline.env
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PROJECT_NAME: my-lambda
  ENVIRONMENT: staging
  S3_BUCKET_NAME: my-shared-lambdas-bucket
  TERRAFORM_PATH: terraform/terraform 

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # -------------------------------
      # 🧾 PASSO CRÍTICO: Checkout do Código da Aplicação - DEVE SER O PRIMEIRO
      # Este passo clona o repositório 'consumer' para o ambiente do runner,
      # tornando 'pipeline.env' e outros arquivos acessíveis.
      # -------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -------------------------------
      # ✅ NOVO PASSO: Carregar variáveis de configuração do arquivo externo
      # (Agora executado APÓS o checkout do código)
      # -------------------------------
      - name: Load Configuration Variables
        run: |
          echo "Carregando variáveis de configuração do pipeline.env..."
          # Verifica se o arquivo pipeline.env existe (usando caminho absoluto para robustez)
          if [ -f "${{ github.workspace }}/pipeline.env" ]; then
            # Filtra comentários e linhas em branco antes de adicionar ao GITHUB_ENV
            grep -vE '^\s*#|^\s*$' "${{ github.workspace }}/pipeline.env" >> $GITHUB_ENV 
            echo "Variáveis carregadas com sucesso:"
            cat "${{ github.workspace }}/pipeline.env" # Apenas para visualização no log
          else
            echo "❌ ERRO: O arquivo 'pipeline.env' não foi encontrado na raiz do repositório (${{ github.workspace }})."
            echo "Por favor, certifique-se de que 'pipeline.env' foi commitado e está na raiz do seu repositório 'consumer'."
            exit 1
          fi
          echo "---"

      # -------------------------------
      # ✅ Validação das variáveis de SQS (mantido, agora usa variáveis carregadas)
      # -------------------------------
      - name: Validate SQS Configuration
        run: |
          if [[ "${{ env.CREATE_SQS_QUEUE }}" == "true" && "${{ env.USE_EXISTING_SQS_TRIGGER }}" == "true" ]]; then
            echo "::error::ERRO DE CONFIGURAÇÃO SQS: As variáveis 'CREATE_SQS_QUEUE' e 'USE_EXISTING_SQS_TRIGGER' não podem ser 'true' ao mesmo tempo."
            echo "Por favor, defina apenas uma delas como 'true' para escolher entre criar uma nova fila SQS ou usar uma existente como trigger."
            exit 1
          fi
          echo "✅ Configuração de SQS validada com sucesso."

      # -------------------------------
      # ⚙️ CHECKOUT Terraform Template
      # -------------------------------            
      - name: Checkout Terraform template
        uses: actions/checkout@v4
        with:
          repository: iamelisandromello/skeleton-terraform-template
          path: terraform
          token: ${{ secrets.GITHUB_TOKEN }}

      # -------------------------------
      # ⚙️ DEBUG: Verificar estrutura e conteúdo do Terraform Template (mantido para validação)
      # -------------------------------
      - name: Debug - Verificar estrutura e conteúdo do Terraform Template (PÓS-CHECKOUT)
        run: |
          echo "📂 Listando arquivos e diretórios recursivamente em 'terraform/'"
          ls -R terraform/ || echo "❌ Diretório 'terraform/' não encontrado ou vazio."
          echo "---"

          echo "📄 Conteúdo de terraform/main.tf (se existir, agora DEVE estar vazio):"
          cat terraform/main.tf 2>/dev/null || echo "❌ terraform/main.tf não encontrado ou vazio."
          echo "---"

          echo "📄 Conteúdo de terraform/terraform/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/main.tf 2>/dev/null || echo "❌ terraform/terraform/main.tf não encontrado ou vazio. VERIFICAR!"
          echo "---"

          echo "📄 Conteúdo de terraform/terraform/modules/sqs/main.tf (agora DEVE estar aqui):"
          cat terraform/terraform/modules/sqs/main.tf 2>/dev/null || echo "❌ terraform/terraform/modules/sqs/main.tf não encontrado ou vazio. VERIFICAR!"
          echo "---"

      # -------------------------------
      # ⚙️ SETUP NODE & VARS
      # -------------------------------        
      - name: Setup Node.js and Env Vars
        uses: iamelisandromello/skeleton-pipeline-template/setup-node@main
        with:
          node_version: '20'

      # -------------------------------
      # 🔧 BUILD & PACKAGE LAMBDA
      # -------------------------------          
      - name: Install & Build
        uses: iamelisandromello/skeleton-pipeline-template/build-package@main
        with:
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # 🔄 UPLOAD LAMBDA TO S3
      # -------------------------------        
      - name: Upload Lambda to S3
        uses: iamelisandromello/skeleton-pipeline-template/upload-to-s3@main
        with:
          global_env_vars_json: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          project_name: ${{ env.PROJECT_NAME }}

      # -------------------------------
      # ⚙️ TERRAFORM SETUP & TFVARS
      # -------------------------------          
      - name: Setup Terraform
        uses: iamelisandromello/skeleton-pipeline-template/setup-terraform@main
        with:
          terraform_version: '1.5.6'
          environment: ${{ env.ENVIRONMENT }}
          project_name: ${{ env.PROJECT_NAME }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # -------------------------------
      # 🔄 GENERATE TVARS
      # -------------------------------          
      - name: Generate tfvars
        uses: iamelisandromello/skeleton-pipeline-template/generate-tfvars@main
        with:
          ENVIRONMENTS: ${{ secrets.ENVIRONMENTS }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }} 
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_name: ${{ env.EXISTING_SQS_QUEUE_NAME }} 

      # -------------------------------
      # 🚚 MOVER terraform.auto.tfvars.json para o diretório correto
      # -------------------------------
      - name: Mover terraform.auto.tfvars.json para o diretório correto
        run: |
          if [ -f "terraform.auto.tfvars.json" ]; then
            echo "🚚 Movendo terraform.auto.tfvars.json da raiz do projeto consumer para ${{ env.TERRAFORM_PATH }}"
            mv terraform.auto.tfvars.json "${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          elif [ -f "terraform/terraform.auto.tfvars.json" ]; then
            echo "🚚 Movendo terraform/terraform.auto.tfvars.json de terraform/ para ${{ env.TERRAFORM_PATH }}"
            mv terraform/terraform.auto.tfvars.json "${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json"
          else
            echo "❌ terraform.auto.tfvars.json não encontrado nem na raiz do projeto consumer nem em terraform/. Verifique a action 'generate-tfvars' e a estrutura de diretórios."
            exit 1
          fi
        if: success() 

      # -------------------------------
      # DEBUG: Verificar terraform.auto.tfvars.json após geração e movimento
      # -------------------------------
      - name: Debug - Verificar terraform.auto.tfvars.json (PÓS-GERAÇÃO E MOVIMENTO)
        run: |
          echo "📂 Listando arquivos no diretório Terraform raiz (${{ env.TERRAFORM_PATH }}/):"
          ls -lah ${{ env.TERRAFORM_PATH }}/
          echo "---"
          echo "📄 Conteúdo de ${{ env.TERRAFORM_PATH }}/terraform.auto.tfvars.json (se existir):"
          cat terraform/terraform.auto.tfvars.json 2>/dev/null || echo "❌ Arquivo terraform.auto.tfvars.json não encontrado no diretório correto."
          echo "---"

      # -------------------------------
      # NOVO PASSO: Calcular o nome da função Lambda
      # -------------------------------
      - name: Calculate Lambda Function Name
        id: calculate_lambda_name
        shell: bash
        run: |
          LAMBDA_NAME="${{ env.PROJECT_NAME }}"
          if [ "${{ env.ENVIRONMENT }}" != "prod" ]; then
            LAMBDA_NAME="${LAMBDA_NAME}-${{ env.ENVIRONMENT }}"
          fi
          echo "Generated Lambda Name: $LAMBDA_NAME"
          echo "lambda_name=$LAMBDA_NAME" >> "$GITHUB_OUTPUT"

      # -------------------------------
      # 🔄 IMPORT, VALIDATE & APPLY TERRAFORM
      # -------------------------------    
      - name: Importar recursos existentes
        uses: iamelisandromello/skeleton-pipeline-template/import-resources@main
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ env.AWS_REGION }}
          project_name: ${{ env.PROJECT_NAME }}
          environment: ${{ env.ENVIRONMENT }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }} 
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_name: ${{ env.EXISTING_SQS_QUEUE_NAME }} 
          lambda_function_name: ${{ steps.calculate_lambda_name.outputs.lambda_name }}

      - name: Validar Terraform
        uses: iamelisandromello/skeleton-pipeline-template/validate-terraform@main
        with:
          terraform_path: ${{ env.TERRAFORM_PATH }} 

      - name: Terraform Plan and Apply
        uses: iamelisandromello/skeleton-pipeline-template/plan-apply-terraform@main
        with:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GLOBAL_ENV_VARS_JSON: ${{ secrets.GLOBAL_ENV_VARS_JSON }}
          ENVIRONMENTS_JSON: ${{ secrets.ENVIRONMENTS }}
          terraform_path: ${{ env.TERRAFORM_PATH }} 
          create_sqs_queue: ${{ env.CREATE_SQS_QUEUE }}
          use_existing_sqs_trigger: ${{ env.USE_EXISTING_SQS_TRIGGER }}
          existing_sqs_queue_name: ${{ env.EXISTING_SQS_QUEUE_NAME }}
